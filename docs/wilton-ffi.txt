-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell modules support for Wilton JavaScript runtime
--   
--   Please see the README on Github at
--   <a>https://github.com/wilton-iot/wilton-ffi#readme</a>
@package wilton-ffi
@version 0.1.0.0


-- | Haskell modules support for <a>Wilton JavaScript runtime</a>.
module Foreign.Wilton.FFI

-- | Registers a function, that can be called from javascript
--   
--   This function takes a function and registers it with Wilton, so it can
--   be called from JavaScript using <a>wiltoncall</a> API.
--   
--   Function must take a single argument - a data that implements
--   <a>Data.Aeson.FromJSON</a> and <a>Data.Data.Data</a>, and must return
--   a data that implements <a>Data.Aeson.ToJSON</a>. Function input
--   argument is converted from JavaScript object to Haskell data object.
--   Function output is returned to JavaScript as a JSON (that can be
--   immediately converted to JavaScript object).
--   
--   If function raises and <tt>Exception</tt>, its error message is
--   converted into JavasSript <tt>Error</tt> message (that can be caught
--   and handled on JavaScript side).
--   
--   Arguments:
--   
--   <ul>
--   <li><tt>name :: String</tt>: name for this call, that should be used
--   from JavaScript to invoke the function</li>
--   <li><tt>callback :: (from -&gt; IO to)</tt>: Function, that will be
--   called from JavaScript</li>
--   </ul>
--   
--   Return value: error status.
registerWiltoncall :: forall from to. (Data from, FromJSON from, ToJSON to) => String -> (from -> IO to) -> IO (Maybe ByteString)

-- | Create an error message, that can be passed back to Wilton
--   
--   Helper function, that can be used with a <tt>Maybe ByteString</tt>
--   value returned from <tt>registerWiltoncall</tt> function.
--   
--   Arguments:
--   
--   <ul>
--   <li><tt>error :: Maybe ByteString</tt>: error status</li>
--   </ul>
--   
--   Return value: error status, that can be returned back to Wilton
createWiltonError :: Maybe ByteString -> IO CString
